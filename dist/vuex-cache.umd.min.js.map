{"version":3,"file":"vuex-cache.umd.min.js","sources":["../src/vuex-cache.js"],"sourcesContent":["/**\n * Check if value is an object.\n * @param {any} value\n * @returns {value is Object}\n */\nconst isObject = value => !!value && typeof value === 'object'\n\n/**\n * Type alias for Store or ActionContext instances.\n * @typedef {import('vuex').Store<any> | import('vuex').ActionContext<any, any>} Store\n */\n\n/**\n * Convert value to `string`.\n * @param {any} value\n * @returns {string}\n */\nconst toString = value =>\n  isObject(value) ? JSON.stringify(value) : String(value)\n\n/**\n * Dispatch's options object.\n * @typedef {import('vuex').DispatchOptions & { timeout: number }} DispatchOptions\n */\n\n/**\n * Dispatch's payload object.\n * @typedef {import('vuex').Payload & { timeout: number }} Payload\n */\n\n/**\n * Type alias for Dispatch parameters.\n * @typedef {[string, any?, DispatchOptions?]|[Payload, DispatchOptions?]} DispatchParams\n */\n\n/**\n * Resolve Dispatch parameters.\n * @param {DispatchParams} params\n * @returns {[string, Payload?, DispatchOptions?]}\n */\nconst resolveParams = params =>\n  isObject(params[0]) ? [params[0].type, params[0], params[1]] : params\n\nconst GenerateKeyError = new Error(\"Can't generate key from parameters.\")\n\n/**\n * Generate key from Dispatch parameters.\n * @param {DispatchParams} params\n * @returns {string|Error}\n */\nconst generateKey = params => {\n  try {\n    const [type, payload] = resolveParams(params)\n    return `${type}:${toString(payload)}`\n  } catch (_) {\n    return GenerateKeyError\n  }\n}\n\n/**\n * Check if value has timeout property.\n * @param {any} value\n * @returns {value is { timeout: number }}\n */\nconst hasTimeout = value => isObject(value) && typeof value.timeout === 'number'\n\n/**\n * Type alias for options object.\n * @typedef {{ timeout?: number }} Options\n */\n\n/**\n * Resolve timeout from parameters and plugin options.\n * @param {DispatchParams} params\n * @param {Options} [pluginOptions]\n * @returns {number}\n */\nconst resolveTimeout = (params, pluginOptions) => {\n  const dispatchOptions = typeof params[0] === 'string' ? params[2] : params[0]\n  if (hasTimeout(dispatchOptions)) {\n    return dispatchOptions.timeout\n  } else if (hasTimeout(pluginOptions)) {\n    return pluginOptions.timeout\n  }\n  return 0\n}\n\n/**\n * Check if value (time) is expired.\n * @param {number} [expiresIn]\n * @returns {boolean}\n */\nconst isExpired = expiresIn => !!expiresIn && Date.now() > expiresIn\n\n/**\n * Cache's state record.\n * @typedef {{ expiresIn?: number, value: Promise<any> }} CacheRecord\n */\n\n/**\n * Cache's state.\n * @type {Map<string, CacheRecord>}\n */\nconst state = new Map()\n\n/**\n * Define cache property to store, or action context, object.\n * @param {Store} store\n * @param {Options} [options]\n */\nconst defineCache = (store, options) => {\n  const cache = {\n    /**\n     * Dispatch an action and set it on cache.\n     * @param  {...DispatchParams} params\n     * @returns {Promise<any>}\n     */\n    dispatch(...params) {\n      const key = generateKey(params)\n\n      if (key === GenerateKeyError) {\n        // Fallback on generateKey errors.\n        return store.dispatch.apply(store, params)\n      }\n\n      const { value, expiresIn } = state.get(key) || {}\n\n      if (!!value && !isExpired(expiresIn)) {\n        return value\n      }\n\n      const timeout = resolveTimeout(params, options)\n\n      const record = {\n        expiresIn: timeout ? Date.now() + timeout : undefined,\n        value: store.dispatch.apply(store, params),\n      }\n\n      state.set(key, record)\n\n      return record.value.catch(error => {\n        state.delete(key)\n        return Promise.reject(error)\n      })\n    },\n\n    /**\n     * Check if an action dispatch is on cache.\n     * @param  {...DispatchParams} params\n     * @returns {boolean}\n     */\n    has(...params) {\n      const key = generateKey(params)\n\n      if (key === GenerateKeyError) {\n        // Fallback on generateKey errors.\n        return false\n      }\n\n      const record = state.get(key)\n      return isObject(record) && !isExpired(record.expiresIn)\n    },\n\n    /**\n     * Clear cache. Returns `true` if cache was cleared and `false` otherwise.\n     * @returns {boolean}\n     */\n    clear() {\n      return state.clear()\n    },\n\n    /**\n     * Detele an action dispatch from cache. Returns `true` if it was deleted\n     * and `false` otherwise.\n     * @returns {boolean}\n     */\n    delete(...params) {\n      const key = generateKey(params)\n\n      if (key === GenerateKeyError) {\n        // Fallback on generateKey errors.\n        return false\n      }\n\n      return state.delete(key)\n    },\n  }\n\n  Object.defineProperty(store, 'cache', {\n    value: cache,\n    writable: false,\n    enumerable: true,\n    configurable: false,\n  })\n\n  for (let namespace in store._modulesNamespaceMap) {\n    const module = getModuleByNamespace(store, 'mapCacheActions', namespace)\n\n    Object.defineProperty(module.context, 'cache', {\n      value: cache,\n      writable: false,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n}\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nconst normalizeMap = map => {\n  return Array.isArray(map)\n    ? map.map(key => ({ key, val: key }))\n    : Object.keys(map).map(key => ({ key, val: map[key] }))\n}\n\n/**\n * Search a special module from store by namespace. if module not exist, print error message.\n * @param {Object} store\n * @param {String} helper\n * @param {String} namespace\n * @return {Object}\n */\nconst getModuleByNamespace = (store, helper, namespace) => {\n  const module = store._modulesNamespaceMap[namespace]\n  if (process.env.NODE_ENV !== 'production' && !module) {\n    console.error(\n      `[vuex-cache] module namespace not found in ${helper}(): ${namespace}`,\n    )\n  }\n  return module\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nconst normalizeNamespace = fn => {\n  return (namespace, map) => {\n    if (typeof namespace !== 'string') {\n      map = namespace\n      namespace = ''\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/'\n    }\n    return fn(namespace, map)\n  }\n}\n\n/**\n * Type alias for Action.\n * @typedef {import('vuex').Action<any, any>} Action\n */\n\n/**\n * Create cache with options and define it on action context instance.\n * @param {Action} action\n * @param {Options} [options]\n * @returns {Action}\n */\nexport const cacheAction = (action, options) =>\n  function(context, payload) {\n    defineCache(context, options)\n    return action.call(this, context, payload)\n  }\n\n/**\n * Create cache actions object to map to a component\n * @param {String} namespace\n * @param {Array} actions\n * @returns {Object}\n */\nexport const mapCacheActions = normalizeNamespace((namespace, actions) => {\n  const res = {}\n  normalizeMap(actions).forEach(({ key, val }) => {\n    res[key] = function mappedAction(...args) {\n      let dispatch = this.$store.cache.dispatch\n      if (namespace) {\n        const module = getModuleByNamespace(\n          this.$store,\n          'mapCacheActions',\n          namespace,\n        )\n        if (!module) {\n          return\n        }\n        // dispatch = module.context.cache.dispatch;\n        dispatch =\n          typeof val === 'function'\n            ? (...params) => {\n                module.context.cache.dispatch.apply(\n                  this.$store,\n                  [`${namespace}${params[0]}`].concat(params.slice(1)),\n                )\n              }\n            : module.context.cache.dispatch\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [`${namespace}${val}`].concat(args))\n    }\n  })\n  return res\n})\n\n/**\n * Create cache with options and define it on store instance.\n * @param {Options} options\n * @returns {(store: Store) => void}\n */\nconst createCache = options => store => defineCache(store, options)\n\nexport default createCache\n"],"names":["const","fn","isObject","value","GenerateKeyError","Error","generateKey","params","type","resolveParams","payload","JSON","stringify","String","_","hasTimeout","timeout","isExpired","expiresIn","Date","now","state","Map","defineCache","store","options","cache","dispatch","key","apply","get","pluginOptions","dispatchOptions","resolveTimeout","record","undefined","set","catch","error","delete","Promise","reject","has","clear","let","namespace","Object","defineProperty","writable","enumerable","configurable","_modulesNamespaceMap","module","getModuleByNamespace","context","helper","process","env","NODE_ENV","console","mapCacheActions","actions","map","res","Array","isArray","val","keys","forEach","ref","this","$store","concat","slice","args","charAt","length","action","call"],"mappings":"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"}